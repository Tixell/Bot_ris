import logging
import random
import time
import os
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, filters, CallbackContext

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—è –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
RATING_FILE = "tea_rating.json"
LAST_RESET_FILE = "last_reset.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
participants = {}  # {chat_id: {user_id: {"first_name": ..., "username": ...}}}
chai_consumption = {}  # —Ä–µ–π—Ç–∏–Ω–≥ —á–∞—è, –∫–ª—é—á ‚Äì —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ user.id
banned_users = {}

# –ú–æ–¥—É–ª—å –±—Ä–∞–∫–æ–≤
# marriages: –∫–ª—é—á ‚Äì frozenset({user1, user2}), –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—Ä–∞–∫–µ
marriages = {}
# user_marriage: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ user_id -> –∫–ª—é—á –±—Ä–∞–∫–∞ (frozenset)
user_marriage = {}
# marriage_proposals: –∫–ª—é—á ‚Äì target user_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (proposer –∏ –≤—Ä–µ–º—è)
marriage_proposals = {}
# –¶–µ–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –±—Ä–∞–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å–ª–æ–≤–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞)
marriage_extension_price = 0

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—è
last_reset_time = None

# –ú–æ–¥—É–ª—å –¥—É—ç–ª–µ–π
# duels: –∫–ª—é—á ‚Äì chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—É—â–µ–π –¥—É—ç–ª–∏
duels = {}
# duel_stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π {user_id: {"wins": int, "draws": int, "losses": int}}
duel_stats = {}
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ö–æ–¥–∞ –¥—É—ç–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "0" ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å)
duel_outcome = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—è ===
def load_rating():
    global chai_consumption
    if os.path.exists(RATING_FILE):
        with open(RATING_FILE, "r", encoding="utf-8") as f:
            try:
                chai_consumption = json.load(f)
            except json.JSONDecodeError:
                chai_consumption = {}
    else:
        chai_consumption = {}

def save_rating():
    with open(RATING_FILE, "w", encoding="utf-8") as f:
        json.dump(chai_consumption, f)

def load_last_reset():
    global last_reset_time
    if os.path.exists(LAST_RESET_FILE):
        with open(LAST_RESET_FILE, "r", encoding="utf-8") as f:
            try:
                timestamp = json.load(f)
                last_reset_time = datetime.fromisoformat(timestamp) if timestamp else None
            except Exception:
                last_reset_time = None
    else:
        last_reset_time = None

def save_last_reset():
    with open(LAST_RESET_FILE, "w", encoding="utf-8") as f:
        if last_reset_time:
            json.dump(last_reset_time.isoformat(), f)
        else:
            json.dump("", f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_rating()
load_last_reset()

# === –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–æ–≤ ===
def check_bans():
    current_time = time.time()
    to_unban = []
    for user_id, unban_time in banned_users.items():
        if current_time >= unban_time:
            to_unban.append(user_id)
    for user_id in to_unban:
        del banned_users[user_id]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ/—Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É ===
def find_user_by_reference(chat_id, ref: str):
    ref = ref.lower()
    if ref.startswith("t.me/"):
        ref = ref[5:]
    if ref.startswith("@"):
        ref = ref[1:]
    for uid, info in participants.get(chat_id, {}).items():
        if info["username"] == ref or info["first_name"].lower() == ref:
            return uid, info
    return None, None

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—è ===
async def rating_chai(update: Update, context: CallbackContext):
    global last_reset_time
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 1 –Ω–µ–¥–µ–ª—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    if last_reset_time is None or datetime.now() - last_reset_time >= timedelta(weeks=1):
        chai_consumption.clear()
        last_reset_time = datetime.now()
        save_last_reset()
        save_rating()
        logger.info("–†–µ–π—Ç–∏–Ω–≥ —á–∞—è –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.")
    sorted_users = sorted(chai_consumption.items(), key=lambda x: x[1], reverse=True)
    if not sorted_users:
        await update.message.reply_text("üìä –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—è. ‚òï")
        return
    message = "üçµ –†–µ–π—Ç–∏–Ω–≥ –ø–æ —á–∞—é –∑–∞ –Ω–µ–¥–µ–ª—é: \n"
    for uid, total in sorted_users[:10]:
        uid_int = int(uid)
        user_info = participants.get(update.effective_chat.id, {}).get(uid_int, {"first_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"})
        # –°–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å–∏–Ω–µ–π —Å—Å—ã–ª–∫–æ–π –±–µ–∑ —è–≤–Ω–æ–≥–æ URL
        message += f"[{user_info['first_name']}](tg://user?id={uid_int}): {total} –ª–∏—Ç—Ä–æ–≤ ‚òï\n"
    await update.message.reply_text(message, parse_mode="Markdown")

# === –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è ¬´–ë—Ä–∞–∫–∏¬ª ===

async def propose_marriage(update: Update, context: CallbackContext, ref: str):
    chat_id = update.effective_chat.id
    proposer = update.effective_user
    proposer_info = participants[chat_id].get(proposer.id)
    target_uid, target_info = find_user_by_reference(chat_id, ref)
    if not target_uid:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ/–∏–º–µ–Ω–∏.")
        return
    if target_uid == proposer.id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
        return
    if proposer.id in user_marriage:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!")
        return
    if target_uid in user_marriage:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!")
        return
    marriage_proposals[target_uid] = {"proposer": proposer.id, "timestamp": datetime.now()}
    await update.message.reply_text(
        f"üíç {proposer_info['first_name']} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å {target_info['first_name']}.\n"
        f"{target_info['first_name']}, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π ¬´–ë—Ä–∞–∫ –¥–∞¬ª –∏–ª–∏ ¬´–ë—Ä–∞–∫ –Ω–µ—Ç¬ª."
    )

async def accept_marriage(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    target = update.effective_user
    target_info = participants[chat_id].get(target.id)
    proposal = marriage_proposals.get(target.id)
    if not proposal:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—Ä–∞–∫–∞.")
        return
    proposer_id = proposal["proposer"]
    proposer_info = participants[chat_id].get(proposer_id)
    now = datetime.now()
    key = frozenset({proposer_id, target.id})
    if key in marriages:
        marriage = marriages[key]
        if not marriage["active"]:
            divorced_time = marriage.get("divorced_time")
            if divorced_time and now - divorced_time <= timedelta(days=3):
                marriage["active"] = True
                marriage["divorced_time"] = None
                user_marriage[proposer_id] = key
                user_marriage[target.id] = key
                await update.message.reply_text("üíç –ë—Ä–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
                del marriage_proposals[target.id]
                return
    if proposer_id in user_marriage or target.id in user_marriage:
        await update.message.reply_text("‚ùå –û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ.")
        del marriage_proposals[target.id]
        return
    marriages[key] = {"partners": (proposer_id, target.id), "start_time": now, "active": True, "divorced_time": None, "extended_until": now}
    user_marriage[proposer_id] = key
    user_marriage[target.id] = key
    await update.message.reply_text("üíç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!")
    del marriage_proposals[target.id]

async def decline_marriage(update: Update, context: CallbackContext):
    target = update.effective_user
    if target.id in marriage_proposals:
        del marriage_proposals[target.id]
        await update.message.reply_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—Ä–∞–∫–∞.")

async def dissolve_marriage(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_marriage:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.")
        return
    key = user_marriage[user_id]
    marriage = marriages.get(key)
    if marriage and marriage["active"]:
        marriage["active"] = False
        marriage["divorced_time"] = datetime.now()
        for uid in key:
            if uid in user_marriage:
                del user_marriage[uid]
        await update.message.reply_text("üíî –ë—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –±—Ä–∞–∫–∞.")

async def my_marriage(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_marriage:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–∞–∫–∞.")
        return
    key = user_marriage[user_id]
    marriage = marriages.get(key)
    if marriage and marriage["active"]:
        partner_id = next(uid for uid in key if uid != user_id)
        partner_info = participants[chat_id].get(partner_id, {"first_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})
        duration = datetime.now() - marriage["start_time"]
        await update.message.reply_text(
            f"üíç –í–∞—à –±—Ä–∞–∫ —Å {partner_info['first_name']} –¥–ª–∏—Ç—Å—è —É–∂–µ {duration.days} –¥–Ω–µ–π."
        )
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–∞–∫–∞.")

async def user_marriage_info(update: Update, context: CallbackContext, ref: str):
    chat_id = update.effective_chat.id
    target_uid, target_info = find_user_by_reference(chat_id, ref)
    if not target_uid:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if target_uid not in user_marriage:
        await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_info['first_name']} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ.")
        return
    key = user_marriage[target_uid]
    marriage = marriages.get(key)
    if marriage and marriage["active"]:
        partner_id = next(uid for uid in key if uid != target_uid)
        partner_info = participants[chat_id].get(partner_id, {"first_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})
        duration = datetime.now() - marriage["start_time"]
        await update.message.reply_text(
            f"üíç –ë—Ä–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_info['first_name']} —Å {partner_info['first_name']} –¥–ª–∏—Ç—Å—è {duration.days} –¥–Ω–µ–π."
        )
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_info['first_name']} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–∞–∫–∞.")

async def list_marriages(update: Update, context: CallbackContext, page: int = 1, per_page: int = 5):
    chat_id = update.effective_chat.id
    active_marriages = [m for m in marriages.values() if m["active"]]
    if not active_marriages:
        await update.message.reply_text("‚ÑπÔ∏è –í —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞–∫–æ–≤.")
        return
    active_marriages.sort(key=lambda m: datetime.now() - m["start_time"], reverse=True)
    total = len(active_marriages)
    start = (page - 1) * per_page
    end = start + per_page
    msg = "üíç –°–ø–∏—Å–æ–∫ –±—Ä–∞–∫–æ–≤:\n"
    for m in active_marriages[start:end]:
        u1, u2 = m["partners"]
        name1 = participants[chat_id].get(u1, {"first_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})["first_name"]
        name2 = participants[chat_id].get(u2, {"first_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})["first_name"]
        duration = datetime.now() - m["start_time"]
        msg += f"{name1} & {name2} ‚Äì {duration.days} –¥–Ω–µ–π\n"
    msg += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {((total - 1) // per_page) + 1}"
    await update.message.reply_text(msg)

async def marry_pair(update: Update, context: CallbackContext, ref1: str, ref2: str):
    chat_id = update.effective_chat.id
    uid1, info1 = find_user_by_reference(chat_id, ref1)
    uid2, info2 = find_user_by_reference(chat_id, ref2)
    if not uid1 or not uid2:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if uid1 in user_marriage or uid2 in user_marriage:
        await update.message.reply_text("‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ.")
        return
    key = frozenset({uid1, uid2})
    now = datetime.now()
    marriages[key] = {"partners": (uid1, uid2), "start_time": now, "active": True, "divorced_time": None, "extended_until": now}
    user_marriage[uid1] = key
    user_marriage[uid2] = key
    await update.message.reply_text(f"üíç {info1['first_name']} –∏ {info2['first_name']} —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ—è—Ç –≤ –±—Ä–∞–∫–µ!")

async def divorce_pair(update: Update, context: CallbackContext, ref1: str, ref2: str):
    chat_id = update.effective_chat.id
    uid1, info1 = find_user_by_reference(chat_id, ref1)
    uid2, info2 = find_user_by_reference(chat_id, ref2)
    if not uid1 or not uid2:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    key = frozenset({uid1, uid2})
    marriage = marriages.get(key)
    if marriage and marriage["active"]:
        marriage["active"] = False
        marriage["divorced_time"] = datetime.now()
        for uid in key:
            if uid in user_marriage:
                del user_marriage[uid]
        await update.message.reply_text(f"üíî –ë—Ä–∞–∫ –º–µ–∂–¥—É {info1['first_name']} –∏ {info2['first_name']} —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç.")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –±—Ä–∞–∫–µ.")

async def reset_marriages(update: Update, context: CallbackContext):
    member = await update.message.chat.get_member(update.message.from_user.id)
    if member.status not in ["administrator", "creator"]:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –±—Ä–∞–∫–∏.")
        return
    marriages.clear()
    user_marriage.clear()
    marriage_proposals.clear()
    await update.message.reply_text("üí• –í—Å–µ –±—Ä–∞–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –±—Ä–∞–∫–∞
async def set_marriage_extension_price(update: Update, context: CallbackContext):
    global marriage_extension_price
    try:
        parts = update.message.text.split()
        price = int(parts[2])
        marriage_extension_price = price
        await update.message.reply_text(f"üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –±—Ä–∞–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {price}.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ë—Ä–∞–∫ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è {—á–∏—Å–ª–æ}")

async def extend_marriage_custom(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    try:
        parts = update.message.text.split()
        days = int(parts[2])
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ë—Ä–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å {–∫–æ–ª-–≤–æ –¥–Ω–µ–π}")
        return
    if user_id not in user_marriage:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.")
        return
    key = user_marriage[user_id]
    marriage = marriages.get(key)
    if not marriage or not marriage["active"]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–∞–∫–∞.")
        return
    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –±—Ä–∞–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    extension = timedelta(days=days)
    if marriage.get("extended_until") and marriage["extended_until"] > datetime.now():
        marriage["extended_until"] += extension
    else:
        marriage["extended_until"] = datetime.now() + extension
    await update.message.reply_text(
        f"‚è≥ –ë—Ä–∞–∫ –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {marriage['extended_until'].strftime('%d.%m.%Y %H:%M:%S')}. –¶–µ–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {marriage_extension_price}."
    )

# === –ú–æ–¥—É–ª—å ¬´–î—É—ç–ª–∏¬ª ===

def init_duel_stats(user_id):
    if user_id not in duel_stats:
        duel_stats[user_id] = {"wins": 0, "draws": 0, "losses": 0}

async def handle_duel(update: Update, context: CallbackContext):
    global duel_outcome
    message_text = update.message.text.strip()
    chat_id = update.effective_chat.id
    user = update.effective_user

    lower_text = message_text.lower()

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞ "–¥—É—ç–ª—å {—Å—Å—ã–ª–∫–∞}"
    if lower_text.startswith("–¥—É—ç–ª—å ") and not lower_text.startswith("–¥—É—ç–ª—å –¥–∞") and not lower_text.startswith("–¥—É—ç–ª—å –Ω–µ—Ç") and not lower_text.startswith("–¥—É—ç–ª—å –æ—Ç–º–µ–Ω–∞"):
        if chat_id in duels:
            await update.message.reply_text("‚ùå –í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –¥—É—ç–ª—å.")
            return
        parts = message_text.split(maxsplit=1)
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –¥—É—ç–ª—å {—Å—Å—ã–ª–∫–∞}")
            return
        ref = parts[1].strip()
        target_uid, target_info = find_user_by_reference(chat_id, ref)
        if not target_uid:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ/–∏–º–µ–Ω–∏.")
            return
        if target_uid == user.id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!")
            return
        duels[chat_id] = {
            "challenger": user.id,
            "target": target_uid,
            "status": "pending",
            "timestamp": datetime.now(),
            "aim_bonus": {user.id: 0, target_uid: 0}
        }
        challenger_info = participants[chat_id].get(user.id)
        await update.message.reply_text(
            f"‚öîÔ∏è {challenger_info['first_name']} –≤—ã–∑—ã–≤–∞–µ—Ç {target_info['first_name']} –Ω–∞ –¥—É—ç–ª—å!\n"
            f"{target_info['first_name']}, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ ¬´–î—É—ç–ª—å –¥–∞¬ª –∏–ª–∏ ¬´–î—É—ç–ª—å –Ω–µ—Ç¬ª."
        )
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–ö—Ç–æ –¥—É—ç–ª—å" ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –¥—É—ç–ª–∏
    if lower_text == "–∫—Ç–æ –¥—É—ç–ª—å":
        if chat_id in duels:
            await update.message.reply_text("‚ùå –í —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –¥—É—ç–ª—å.")
            return
        chat_participants = [uid for uid in participants.get(chat_id, {}) if uid != context.bot.id and uid != user.id]
        if not chat_participants:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥—É—ç–ª–∏.")
            return
        target_uid = random.choice(chat_participants)
        target_info = participants[chat_id].get(target_uid)
        duels[chat_id] = {
            "challenger": user.id,
            "target": target_uid,
            "status": "pending",
            "timestamp": datetime.now(),
            "aim_bonus": {user.id: 0, target_uid: 0}
        }
        challenger_info = participants[chat_id].get(user.id)
        await update.message.reply_text(
            f"‚öîÔ∏è {challenger_info['first_name']} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç {target_info['first_name']} –Ω–∞ –¥—É—ç–ª—å!\n"
            f"{target_info['first_name']}, –æ—Ç–≤–µ—Ç—å—Ç–µ ¬´–î—É—ç–ª—å –¥–∞¬ª –∏–ª–∏ ¬´–î—É—ç–ª—å –Ω–µ—Ç¬ª."
        )
        return

    # –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞
    if lower_text == "–¥—É—ç–ª—å –¥–∞":
        if chat_id not in duels:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥—É—ç–ª–∏.")
            return
        duel = duels[chat_id]
        if duel["status"] != "pending" or duel["target"] != user.id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–∑–æ–≤–∞ –Ω–∞ –¥—É—ç–ª—å.")
            return
        duel["status"] = "active"
        duel["turn"] = random.choice([duel["challenger"], duel["target"]])
        for uid in duel["aim_bonus"]:
            duel["aim_bonus"][uid] = 0
        challenger_info = participants[chat_id].get(duel["challenger"])
        target_info = participants[chat_id].get(duel["target"])
        starter = participants[chat_id].get(duel["turn"])
        await update.message.reply_text(
            f"‚öîÔ∏è –î—É—ç–ª—å –º–µ–∂–¥—É {challenger_info['first_name']} –∏ {target_info['first_name']} –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"–ü–µ—Ä–≤—ã–π —Ö–æ–¥ —É {starter['first_name']}. –ö–æ–º–∞–Ω–¥—ã: ¬´–í—ã—Å—Ç—Ä–µ–ª¬ª, ¬´–ü—Ä–∏—Ü–µ–ª–∏—Ç—å—Å—è¬ª, ¬´–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—Ü–µ–ª¬ª."
        )
        return

    # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
    if lower_text == "–¥—É—ç–ª—å –Ω–µ—Ç":
        if chat_id not in duels:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥—É—ç–ª–∏.")
            return
        duel = duels[chat_id]
        if duel["status"] != "pending" or duel["target"] != user.id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–∑–æ–≤–∞ –Ω–∞ –¥—É—ç–ª—å.")
            return
        del duels[chat_id]
        await update.message.reply_text("‚ùå –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        return

    # –û—Ç–º–µ–Ω–∞ –≤—ã–∑–æ–≤–∞ (–µ—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º)
    if lower_text == "–¥—É—ç–ª—å –æ—Ç–º–µ–Ω–∞":
        if chat_id not in duels:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥—É—ç–ª–∏.")
            return
        duel = duels[chat_id]
        if duel["challenger"] != user.id:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤.")
            return
        del duels[chat_id]
        await update.message.reply_text("‚ùå –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    # –ö–æ–º–∞–Ω–¥—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏
    if chat_id in duels:
        duel = duels[chat_id]
        if duel["status"] == "active":
            if user.id not in [duel["challenger"], duel["target"]]:
                return

            # –ü—Ä–∏—Ü–µ–ª–∏—Ç—å—Å—è
            if lower_text == "–ø—Ä–∏—Ü–µ–ª–∏—Ç—å—Å—è":
                if duel.get("turn") != user.id:
                    await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
                    return
                duel["aim_bonus"][user.id] += 10
                await update.message.reply_text(
                    f"üéØ {participants[chat_id][user.id]['first_name']} –ø—Ä–∏—Ü–µ–ª–∏–ª—Å—è. –ë–æ–Ω—É—Å: {duel['aim_bonus'][user.id]}%"
                )
                return

            # –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—Ü–µ–ª
            if lower_text == "—Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—Ü–µ–ª":
                if duel.get("turn") != user.id:
                    await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
                    return
                duel["aim_bonus"][user.id] = 0
                await update.message.reply_text(
                    f"üéØ {participants[chat_id][user.id]['first_name']} —Å–±—Ä–æ—Å–∏–ª –ø—Ä–∏—Ü–µ–ª."
                )
                return

            # –í—ã—Å—Ç—Ä–µ–ª
            if lower_text == "–≤—ã—Å—Ç—Ä–µ–ª":
                if duel.get("turn") != user.id:
                    await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
                    return
                base_chance = 50
                bonus = duel["aim_bonus"][user.id]
                hit_chance = base_chance + bonus
                roll = random.randint(1, 100)
                shooter_name = participants[chat_id][user.id]["first_name"]
                if roll <= hit_chance:
                    loser = duel["target"] if user.id == duel["challenger"] else duel["challenger"]
                    winner = user.id
                    init_duel_stats(winner)
                    init_duel_stats(loser)
                    duel_stats[winner]["wins"] += 1
                    duel_stats[loser]["losses"] += 1
                    result_msg = f"üí• {shooter_name} –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –∏ –ø–æ–ø–∞–ª! –î—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞."
                    outcome_text = ""
                    if duel_outcome == "–∫–∏–∫":
                        outcome_text = "–ë—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –∫–∏–∫."
                    elif duel_outcome == "–±–∞–Ω –º–∏–Ω—É—Ç–∞":
                        banned_users[loser] = time.time() + 60
                        outcome_text = "–ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –±–∞–Ω –Ω–∞ –º–∏–Ω—É—Ç—É."
                    elif duel_outcome == "–±–∞–Ω 10 –º–∏–Ω—É—Ç":
                        banned_users[loser] = time.time() + 600
                        outcome_text = "–ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç."
                    elif duel_outcome == "–±–∞–Ω —á–∞—Å":
                        banned_users[loser] = time.time() + 3600
                        outcome_text = "–ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –±–∞–Ω –Ω–∞ —á–∞—Å."
                    elif duel_outcome == "–±–∞–Ω —Å—É—Ç–∫–∏":
                        banned_users[loser] = time.time() + 86400
                        outcome_text = "–ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –±–∞–Ω –Ω–∞ —Å—É—Ç–∫–∏."
                    elif duel_outcome == "–±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞":
                        banned_users[loser] = time.time() + 10 * 365 * 86400
                        outcome_text = "–ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞."
                    if outcome_text:
                        result_msg += f"\n{outcome_text}"
                    await update.message.reply_text(result_msg)
                    del duels[chat_id]
                else:
                    await update.message.reply_text(f"üòÖ {shooter_name} –≤—ã—Å—Ç—Ä–µ–ª–∏–ª, –Ω–æ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!")
                    duel["aim_bonus"][user.id] = 0
                    duel["turn"] = duel["target"] if user.id == duel["challenger"] else duel["challenger"]
                    next_shooter = participants[chat_id][duel["turn"]]["first_name"]
                    await update.message.reply_text(f"–°–µ–π—á–∞—Å —Ö–æ–¥ —É {next_shooter}.")
                return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ö–æ–¥–∞ –¥—É—ç–ª–∏
    if lower_text.startswith("–¥—É—ç–ª–∏ –∏—Å—Ö–æ–¥"):
        parts = message_text.split(maxsplit=2)
        if len(parts) < 3:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –î—É—ç–ª–∏ –∏—Å—Ö–æ–¥ {–ø–∞—Ä–∞–º–µ—Ç—Ä}")
            return
        duel_outcome = parts[2].strip().lower()
        await update.message.reply_text(f"‚öôÔ∏è –ò—Å—Ö–æ–¥ –¥—É—ç–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {duel_outcome}")
        return

    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π
    if lower_text == "–¥—É—ç–ª–∏ —Å—Ç–∞—Ç–∞":
        if not duel_stats:
            await update.message.reply_text("‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π –ø—É—Å—Ç–∞.")
            return
        msg = "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π:\n"
        for uid, stats in duel_stats.items():
            name = participants[chat_id].get(uid, {"first_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})["first_name"]
            msg += f"{name}: –í—ã–∏–≥—Ä—ã—à–µ–π {stats['wins']} | –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π {stats['losses']} | –ù–∏—á—å–∏—Ö {stats['draws']}\n"
        await update.message.reply_text(msg)
        return

    # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π
    if lower_text in ("!–¥—É—ç–ª–∏ —Å–±—Ä–æ—Å", "!—Å–±—Ä–æ—Å –¥—É—ç–ª–µ–π"):
        duel_stats.clear()
        await update.message.reply_text("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π —Å–±—Ä–æ—à–µ–Ω–∞.")
        return

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===

async def handle_message(update: Update, context: CallbackContext):
    if not update.message or not update.message.text:
        return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text.strip()
    chat = update.effective_chat
    user = update.effective_user

    check_bans()

    if user.id in banned_users:
        await update.message.reply_text("‚ùó –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. ‚ùó")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Å–æ—Ö—Ä–∞–Ω—è–µ–º first_name –∏ username
    if chat.id not in participants:
        participants[chat.id] = {}
    participants[chat.id][user.id] = {
        "first_name": user.first_name,
        "username": user.username.lower() if user.username else str(user.id)
    }

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—è
    if message_text.startswith("–†–∏—Å —Ä–µ–π—Ç–∏–Ω–≥ —á–∞—è"):
        await rating_chai(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è ¬´–ë—Ä–∞–∫–∏¬ª –∏ –¥—É—ç–ª–µ–π
    lower_text = message_text.lower()
    if lower_text.startswith("–±—Ä–∞–∫") or lower_text.startswith("!—Ä–∞–∑–≤–æ–¥") or \
       lower_text.startswith("–º–æ–π –±—Ä–∞–∫") or lower_text.startswith("—Ç–≤–æ–π –±—Ä–∞–∫") or \
       lower_text.startswith("–±—Ä–∞–∫–∏") or lower_text.startswith("–ø–æ–∂–µ–Ω–∏—Ç—å –ø–∞—Ä—É") or \
       lower_text.startswith("—Ä–∞–∑–≤–µ—Å—Ç–∏ –ø–∞—Ä—É") or lower_text.startswith("—Å–±—Ä–æ—Å –±—Ä–∞–∫–æ–≤") or \
       lower_text.startswith("–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞") or lower_text.startswith("—Ç–æ–ø –±—Ä–∞–∫–æ–≤") or \
       lower_text.startswith("–∞–≤—Ç–æ—Ä–∞–∑–≤–æ–¥ –±—Ä–∞–∫–æ–≤") or lower_text.startswith("–±—Ä–∞–∫ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è") or \
       lower_text.startswith("–±—Ä–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å"):
        await handle_marriage(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è ¬´–î—É—ç–ª–∏¬ª
    if lower_text.startswith("–¥—É—ç–ª—å") or lower_text.startswith("–∫—Ç–æ –¥—É—ç–ª—å") or \
       lower_text.startswith("–≤—ã—Å—Ç—Ä–µ–ª") or lower_text in ("–ø—Ä–∏—Ü–µ–ª–∏—Ç—å—Å—è", "—Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—Ü–µ–ª") or \
       lower_text.startswith("–¥—É—ç–ª–∏ –∏—Å—Ö–æ–¥") or lower_text.startswith("–¥—É—ç–ª–∏ —Å—Ç–∞—Ç–∞") or \
       lower_text in ("!–¥—É—ç–ª–∏ —Å–±—Ä–æ—Å", "!—Å–±—Ä–æ—Å –¥—É—ç–ª–µ–π"):
        await handle_duel(update, context)
        return

    # –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã (–†–∏—Å –∫—Ç–æ, –†–∏—Å –∏–Ω—Ñ–∞ —á—Ç–æ, –ß–∞–π –ø–∏—Ç—å, –ö—Ä—É—Ç–∏–º –±—É—Ç—ã–ª–∫–æ)
    if message_text.startswith("–†–∏—Å –∫—Ç–æ") or message_text.startswith("–ö—Ç–æ —Ä–∏—Å—É–µ—Ç"):
        if message_text.startswith("–†–∏—Å –∫—Ç–æ"):
            additional_text = message_text[len("–†–∏—Å –∫—Ç–æ"):].strip()
        else:
            additional_text = message_text[len("–ö—Ç–æ —Ä–∏—Å—É–µ—Ç"):].strip()
        chosen_phrase = random.choice(["üîÆ–Ø –≤–∏–∂—É", "üîÆ–Ø –∑–Ω–∞—é", "ü•†–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è", "üßô–Ø —É–≤–µ—Ä–µ–Ω"])
        bot_id = context.bot.id
        bot_name = "–ë–æ—Ç"
        participants[chat.id][bot_id] = {"first_name": bot_name, "username": bot_name.lower()}
        chat_participants = list(participants[chat.id].items())
        chosen_user_id, info = random.choice(chat_participants)
        chosen_name = info["first_name"]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä—ã—Ç—É—é —Å—Å—ã–ª–∫—É —Å tg://user?id=
        reply_text = f"{chosen_phrase}, —á—Ç–æ [{chosen_name}](tg://user?id={chosen_user_id}) {additional_text} üòÑ"
        await update.message.reply_text(reply_text, parse_mode="Markdown")
        return

    if "—Ä–∏—Å –∏–Ω—Ñ–∞ —á—Ç–æ" in message_text.lower() or "–∏–Ω—Ñ–∞ —á—Ç–æ" in message_text.lower():
        infa_phrases = ["üîç–Ø –æ–±–Ω–∞—Ä—É–∂–∏–ª", "ü§î–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º", "üßê–Ø –ø–æ–¥—Å—á–∏—Ç–∞–ª", "üßÆ–ö–∞–∂–µ—Ç—Å—è, —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª"]
        chosen_phrase = random.choice(infa_phrases)
        try:
            if "—Ä–∏—Å –∏–Ω—Ñ–∞ —á—Ç–æ" in message_text.lower():
                subject = message_text.split("–†–∏—Å –∏–Ω—Ñ–∞ —á—Ç–æ", 1)[1].strip()
            else:
                subject = message_text.split("–ò–Ω—Ñ–∞ —á—Ç–æ", 1)[1].strip()
        except IndexError:
            subject = ""
        random_percentage = random.randint(1, 100)
        reply_text = f"üí° {chosen_phrase}, —á—Ç–æ {subject} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {random_percentage}% üòå"
        await update.message.reply_text(reply_text)
        return

    if message_text.startswith("–ß–∞–π –ø–∏—Ç—å") or message_text.startswith("–ü–∏—Ç—å —á–∞–π"):
        if message_text.startswith("–ß–∞–π –ø–∏—Ç—å"):
            tea_name = message_text[len("–ß–∞–π –ø–∏—Ç—å"):].strip()
        else:
            tea_name = message_text[len("–ü–∏—Ç—å —á–∞–π"):].strip()
        if tea_name:
            random_liters = round(random.uniform(1, 40), 2)
            uid = str(user.id)
            chai_consumption[uid] = chai_consumption.get(uid, 0) + random_liters
            save_rating()
            reply_text = f"üçµ {user.first_name}, –≤—ã–ø–∏–ª {random_liters} –ª–∏—Ç—Ä–æ–≤ —á–∞—è {tea_name} üòã"
            await update.message.reply_text(reply_text)
        return

    if message_text.startswith("–ö—Ä—É—Ç–∏–º –±—É—Ç—ã–ª–∫–æ") or message_text.startswith("–ö—Ç–æ –∫—Ä—É—Ç–∏—Ç –±—É—Ç—ã–ª–∫–æ"):
        if message_text.startswith("–ö—Ä—É—Ç–∏–º –±—É—Ç—ã–ª–∫–æ"):
            additional_text = message_text[len("–ö—Ä—É—Ç–∏–º –±—É—Ç—ã–ª–∫–æ"):].strip()
        else:
            additional_text = message_text[len("–ö—Ç–æ –∫—Ä—É—Ç–∏—Ç –±—É—Ç—ã–ª–∫–æ"):].strip()
        if len(participants[chat.id]) < 2:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∫—Ä—É—Ç–∞–Ω—É—Ç—å –±—É—Ç—ã–ª–∫–æ, –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞. ‚ùå")
            return
        sampled = random.sample(list(participants[chat.id].items()), 2)
        (user1_id, user1_info), (user2_id, user2_info) = sampled[0], sampled[1]
        user1_name = user1_info["first_name"]
        user2_name = user2_info["first_name"]
        bottle_phrases = [
            "üçæ –ë—É—Ç—ã–ª–∫–∞ —Ä–µ—à–∏–ª–∞, —á—Ç–æ",
            "üéâ –°—É–¥—å–±–∞ —á–µ—Ä–µ–∑ –±—É—Ç—ã–ª–∫—É: –≤—ã–±–µ—Ä–∏—Ç–µ",
            "üí´ –ë—É—Ç—ã–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞",
            "ü•Ç –ë—É—Ç—ã–ª–∫–∞ –≤—ã–±—Ä–∞–ª–∞"
        ]
        chosen_bottle_phrase = random.choice(bottle_phrases)
        if additional_text:
            phrase = f"{chosen_bottle_phrase} {user1_name} {additional_text} {user2_name} üîÑ"
        else:
            phrase = f"{chosen_bottle_phrase} {user1_name} –∏ {user2_name} üîÑ"
        reply_text = f"{phrase}\n[{user1_name}](tg://user?id={user1_id}) | [{user2_name}](tg://user?id={user2_id})"
        await update.message.reply_text(reply_text, parse_mode="Markdown")
        return

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def ban_user(update: Update, context: CallbackContext):
    if not update.message.chat.get_member(update.message.from_user.id).status in ["administrator", "creator"]:
        await update.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ‚ùó")
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö> ‚ùå")
        return
    try:
        user_id = int(context.args[0])
        ban_time = int(context.args[1])
        unban_time = time.time() + ban_time
        banned_users[user_id] = unban_time
        await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {ban_time} —Å–µ–∫—É–Ω–¥. üö´")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. ‚ùå")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'rating_chai':
        update.message = query.message
        await rating_chai(update, context)
    elif data == 'ban_user':
        await query.edit_message_text("–ß—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ban <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö>")
    elif data == 'info_what':
        await query.edit_message_text("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–†–∏—Å –∏–Ω—Ñ–∞ —á—Ç–æ <—Ç–µ–º–∞>', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —Ç–µ–º–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥ —á–∞—è", callback_data='rating_chai')],
        [InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='ban_user')],
        [InlineKeyboardButton("üí° –ò–Ω—Ñ–∞ —á—Ç–æ", callback_data='info_what')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", reply_markup=reply_markup)
    await update.message.reply_text("‚ö´ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    TOKEN = os.environ.get("BOTTOKEN")
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rating_chai", rating_chai))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)

    application.run_polling()
    logger.info("‚ö´ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

if __name__ == '__main__':
    main()
